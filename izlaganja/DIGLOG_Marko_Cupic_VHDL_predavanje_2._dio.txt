--Sinkroni bistabil osnovnu funkcionalnost obavlja samo kada mu to dopusti signal takta
--Asinkroni bistabil nema ulaz za takt
--Upravljanje bistabilima može biti razinom ili bridom
--Sinkroni sustav - svi sekvencijski elementi dobivaju i slušaju isti signal takta.
--Asinkroni sustav - Sustav P nije sinkron;



library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

ENTITY dff IS PORT(
	d: IN STD_LOGIC;;
	cp: IN STD_LOGIC;
	q: OUT STD_LOGIC;
	qn:OUT STD_LOGIC;
);
END dff;
ARCHITECTURE arch OF IS

BEGIN 
	process(cp) --lista osjetljivosti je popis signala koji se trebaju čitati. Stavljaju se samo signali koji utječu na listu
	
	variable stanje: std_logic :='0';--varijable pridruzujem sa :=
	
	begin
		if falling_edge(cp) then --funkcija falling edge daje 'true' ako je padajuci brid na cpu
			stanje := d; -- OPREZ!! Stanje je varijabla
		end if;
		
		q<=stanje after 10ns;
		qn<=not stanje after 10ns;
		
	end process;
	
END arch;

--Želimo ostvartiti bistabil sa set i reset naredbama. Želimo da je reset prioritetni
--Reset je prioritetni

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

ENTITY dff IS PORT(
	d,s,r: IN STD_LOGIC;;
	cp: IN STD_LOGIC;
	q: OUT STD_LOGIC;
	qn:OUT STD_LOGIC;
);
END dff;
ARCHITECTURE arch OF IS

BEGIN 
	process(cp,s,r)--minimalna lista osjetljivosti promjenjena
	--Kod modeliranja bistabila minimalnu listu osjetljivosti čine signal takta te svi dodatni ulazi koji djeluju asinkrono
	
	
	variable stanje: std_logic :='0';
	
	begin
		if r='0' then -- set i reset su asinkroni i ne ovise o signalu takta(cp)
			stanje :='0';
		elsif s='1' then
			stanje := '1';		
		elsif falling_edge(cp) then 
			stanje := d;
		end if;
		
		q<=stanje after 10ns;
		qn<=not stanje after 10ns;
		
		
	end process;
	
END arch;

--MODELIRANJE MOOREOVOG AUTOMATA--
--Druga tema na pripremi--

--Želim automat koji na A i B dobiva znamenke 0 i 1 te broji koliko puta je A bio veći od B. Na izlazu automat generira
--ostatak toga djeljena s 4 kodiran Grayevim kôdom

--Simbolom zvijezdice označujemo sve pobude osim onih koje su u određenom stanju eksplicitno navedene

--VHDL KÔD ZA AUTOMAT--

--Koristimo "One Hot" kodiranje -> to znači da za broj raznih načina imamo toliko bitova kôdne riječi

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

ENTITY automat IS PORT(
	a,b,cp:IN STD_LOGIC;
	o1,o0: OUT STD_LOGIC;
);
END automat;

ARCHITECTURE arch OF automat IS
	constant s0: std_logic_vector(3 downto 0) :="0001";
	constant s1: std_logic_vector(3 downto 0) :="0010";
	constant s2: std_logic_vector(3 downto 0) :="0100";
	constant s3: std_logic_vector(3 downto 0) :="1000";
	
	signal stanje, sstanje: std_logic(3 downto 0);
BEGIN

	process(cp)
	begin
		if rising_edge(cp) then
			stanje <= sstanje;
		end if;
	end process;
	
	process(stanje)
	begin
		case stanje is
			when s0=> o1 <='0'; o0<='0';
			when s1 =>o1 <='0'; o0<='1';
			when s2 => ...
			when s3 => ...
			when others => o1<='0'; o0<='0';
			--završiti sami --> zbog vremena nismo na pripremi			
	end process;
	
	process(stanje, a,b)
	begin
		case stanje is 
			when s0 => if a='1" and b='1' then stanje <=s1; else sstanje <=s0; end if;
			when s1 => ...
			...
			...
			when others => sstanje <= s0;
		end case;
	end process;

END arch;
